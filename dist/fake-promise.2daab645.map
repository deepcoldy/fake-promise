{"version":3,"sources":["fake-promise.ts","index.ts"],"names":[],"mappings":"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","file":"fake-promise.2daab645.map","sourceRoot":"..","sourcesContent":["// 判断变量否为function\nconst isFunction = variable => typeof variable === 'function';\n// 定义Promise的三种状态常量\nconst PENDING = 'PENDING';\nconst FULFILLED = 'FULFILLED';\nconst REJECTED = 'REJECTED';\n\nexport default class MyPromise {\n  // 添加状态\n  _status = PENDING;\n  // 添加状态\n  _value = undefined;\n  // 添加成功回调函数队列\n  _fulfilledQueues = [];\n  // 添加失败回调函数队列\n  _rejectedQueues = [];\n  constructor(handle) {\n    if (!isFunction(handle)) {\n      throw new Error('MyPromise must accept a function as a parameter');\n    }\n\n    // 执行handle\n    try {\n      handle(this._resolve.bind(this), this._reject.bind(this));\n    } catch (err) {\n      this._reject(err);\n    }\n  }\n  // 添加resovle时执行的函数\n  _resolve(val) {\n    const run = () => {\n      if (this._status !== PENDING) return;\n      // 依次执行成功队列中的函数，并清空队列\n      const runFulfilled = value => {\n        let cb;\n        while ((cb = this._fulfilledQueues.shift())) {\n          cb(value);\n        }\n      };\n      // 依次执行失败队列中的函数，并清空队列\n      const runRejected = error => {\n        let cb;\n        while ((cb = this._rejectedQueues.shift())) {\n          cb(error);\n        }\n      };\n      /* 如果resolve的参数为Promise对象，则必须等待该Promise对象状态改变后,\n        当前Promsie的状态才会改变，且状态取决于参数Promsie对象的状态\n      */\n      if (val instanceof MyPromise) {\n        val.then(\n          value => {\n            this._value = value;\n            this._status = FULFILLED;\n            runFulfilled(value);\n          },\n          err => {\n            this._value = err;\n            this._status = REJECTED;\n            runRejected(err);\n          }\n        );\n      } else {\n        this._value = val;\n        this._status = FULFILLED;\n        runFulfilled(val);\n      }\n    };\n    // 为了支持同步的Promise，这里采用异步调用\n    setTimeout(run, 0);\n  }\n  // 添加reject时执行的函数\n  _reject(err) {\n    if (this._status !== PENDING) return;\n    // 依次执行失败队列中的函数，并清空队列\n    const run = () => {\n      this._status = REJECTED;\n      this._value = err;\n      let cb;\n      while ((cb = this._rejectedQueues.shift())) {\n        cb(err);\n      }\n    };\n    // 为了支持同步的Promise，这里采用异步调用\n    setTimeout(run, 0);\n  }\n  // 添加then方法\n  then(onFulfilled, onRejected) {\n    const { _value, _status } = this;\n    // 返回一个新的Promise对象\n    return new MyPromise((onFulfilledNext, onRejectedNext) => {\n      // 封装一个成功时执行的函数\n      let fulfilled = value => {\n        try {\n          if (!isFunction(onFulfilled)) {\n            onFulfilledNext(value);\n          } else {\n            let res = onFulfilled(value);\n            if (res instanceof MyPromise) {\n              // 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调\n              res.then(onFulfilledNext, onRejectedNext);\n            } else {\n              //否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数\n              onFulfilledNext(res);\n            }\n          }\n        } catch (err) {\n          // 如果函数执行出错，新的Promise对象的状态为失败\n          onRejectedNext(err);\n        }\n      };\n      // 封装一个失败时执行的函数\n      let rejected = error => {\n        try {\n          if (!isFunction(onRejected)) {\n            onRejectedNext(error);\n          } else {\n            let res = onRejected(error);\n            if (res instanceof MyPromise) {\n              // 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调\n              res.then(onFulfilledNext, onRejectedNext);\n            } else {\n              //否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数\n              onFulfilledNext(res);\n            }\n          }\n        } catch (err) {\n          // 如果函数执行出错，新的Promise对象的状态为失败\n          onRejectedNext(err);\n        }\n      };\n      switch (_status) {\n        // 当状态为pending时，将then方法回调函数加入执行队列等待执行\n        case PENDING:\n          this._fulfilledQueues.push(fulfilled);\n          this._rejectedQueues.push(rejected);\n          break;\n        // 当状态已经改变时，立即执行对应的回调函数\n        case FULFILLED:\n          fulfilled(_value);\n          break;\n        case REJECTED:\n          rejected(_value);\n          break;\n      }\n    });\n  }\n  // 添加catch方法\n  catch(onRejected) {\n    return this.then(undefined, onRejected);\n  }\n  // 添加静态resolve方法\n  static resolve(value) {\n    // 如果参数是MyPromise实例，直接返回这个实例\n    if (value instanceof MyPromise) return value;\n    return new MyPromise(resolve => resolve(value));\n  }\n  // 添加静态reject方法\n  static reject(value) {\n    return new MyPromise((resolve, reject) => reject(value));\n  }\n  // 添加静态all方法\n  static all(list) {\n    return new MyPromise((resolve, reject) => {\n      /**\n       * 返回值的集合\n       */\n      let values = [];\n      let count = 0;\n      for (let [i, p] of list.entries()) {\n        // 数组参数如果不是MyPromise实例，先调用MyPromise.resolve\n        this.resolve(p).then(\n          res => {\n            values[i] = res;\n            count++;\n            // 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled\n            if (count === list.length) resolve(values);\n          },\n          err => {\n            // 有一个被rejected时返回的MyPromise状态就变成rejected\n            reject(err);\n          }\n        );\n      }\n    });\n  }\n  // 添加静态race方法\n  static race(list) {\n    return new MyPromise((resolve, reject) => {\n      for (let p of list) {\n        // 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变\n        this.resolve(p).then(\n          res => {\n            resolve(res);\n          },\n          err => {\n            reject(err);\n          }\n        );\n      }\n    });\n  }\n  finally(cb) {\n    return this.then(\n      value => MyPromise.resolve(cb()).then(() => value),\n      reason =>\n        MyPromise.resolve(cb()).then(() => {\n          throw reason;\n        })\n    );\n  }\n}\n","import fakePromise from \"./fake-promise\";\n\nnew fakePromise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"FULFILLED\");\n  }, 1000);\n});\n\n\nnew fakePromise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"FULFILLED\");\n  }, 1000);\n});\n\n\nlet promise1 = new fakePromise((resolve, reject) => {\n  setTimeout(() => {\n    resolve()\n  }, 1000)\n})\nlet promise2 = promise1.then(res => {\n  // 返回一个普通值\n  return '这里返回一个普通值1'\n})\npromise2.then(res => {\n  console.log(res) //1秒后打印出：这里返回一个普通值\n})\n\n\nlet promise3 = new fakePromise((resolve, reject) => {\n  setTimeout(() => {\n    resolve();\n  }, 1000);\n});\nlet promise4 = promise3.then(res => {\n  // 返回一个Promise对象\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('这里返回一个Promise')\n    }, 2000)\n  })\n})\npromise2.then(res => {\n  console.log(res) //3秒后打印出：这里返回一个Promise\n})\n"]}