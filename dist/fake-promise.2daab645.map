{"version":3,"sources":["fake-promise.ts","index.ts"],"names":[],"mappings":"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","file":"fake-promise.2daab645.map","sourceRoot":"..","sourcesContent":["// 判断变量否为function\nconst isFunction = variable => typeof variable === \"function\";\n\n// 定义Promise的三种状态常量\n\nconst PENDING = \"PENDING\";\nconst FULFILLED = \"FULFILLED\";\nconst REJECTED = \"REJECTED\";\nexport default class fakePromise {\n  // 添加状态\n  _status = PENDING;\n  _value = undefined;\n  _fulfilledQueues = [];\n  // 添加失败回调函数队列\n  _rejectedQueues = [];\n\n  constructor(handle: (resolve?: any, reject?: any) => void) {\n    if (!isFunction(handle)) {\n      throw new Error(\"MyPromise must accept a function as a parameter\");\n    }\n\n    // 执行handle\n    try {\n      handle(this._resolve.bind(this), this._reject.bind(this));\n    } catch (err) {\n      this._reject(err);\n    }\n  }\n  // 添加resovle时执行的函数\n  _resolve(val) {\n    if (this._status !== PENDING) return;\n    this._status = FULFILLED;\n    this._value = val;\n  }\n  // 添加reject时执行的函数\n  _reject(err) {\n    if (this._status !== PENDING) return;\n    this._status = REJECTED;\n    this._value = err;\n  }\n  // 添加then方法\n  then(onFulfilled?: any, onRejected?: any) {\n    const { _value, _status } = this;\n    switch (_status) {\n      // 当状态为pending时，将then方法回调函数加入执行队列等待执行\n      case PENDING:\n        this._fulfilledQueues.push(onFulfilled);\n        this._rejectedQueues.push(onRejected);\n        break;\n      // 当状态已经改变时，立即执行对应的回调函数\n      case FULFILLED:\n        onFulfilled(_value);\n        break;\n      case REJECTED:\n        onRejected(_value);\n        break;\n    }\n    // 返回一个新的Promise对象\n    return new fakePromise((onFulfilledNext, onRejectedNext) => {});\n  }\n}\n","import fakePromise from \"./fake-promise\";\n\nnew fakePromise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"FULFILLED\");\n  }, 1000);\n});\n\n\nnew fakePromise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"FULFILLED\");\n  }, 1000);\n});\n\n\nlet promise1 = new fakePromise((resolve, reject) => {\n  setTimeout(() => {\n    resolve()\n  }, 1000)\n})\nlet promise2 = promise1.then(res => {\n  // 返回一个普通值\n  return '这里返回一个普通值'\n})\npromise2.then(res => {\n  console.log(res) //1秒后打印出：这里返回一个普通值\n})\n\n\nlet promise3 = new fakePromise((resolve, reject) => {\n  setTimeout(() => {\n    resolve();\n  }, 1000);\n});\nlet promise4 = promise3.then(res => {\n  // 返回一个Promise对象\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('这里返回一个Promise')\n    }, 2000)\n  })\n})\npromise2.then(res => {\n  console.log(res) //3秒后打印出：这里返回一个Promise\n})\n"]}